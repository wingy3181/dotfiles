[alias]

    a = add

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Update the content of the last commit by including all
    # staged changes as well as allow the user to change its
    # commit message.

    am = commit --amend

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Update the content of the last commit by including all
    # local changes.

    ama = !git add --all && git commit --amend --no-edit

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    b = branch

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    c = commit

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Commit all changes.

    ca = !git add --all && git commit

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    co  = checkout

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    cp  = cherry-pick

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Credit an author on the latest commit.
    # -n : True if the length of string is nonzero.
    # $1 : name
    # $2 : email
    # - C : re-use log message

    credit = "!f() { \
        if [ -n \"$1\" ] && [ -n \"$2\" ]; then \
            git commit --amend --author \"$1 <$2>\" --no-edit --reuse-message=HEAD; \
        fi \
    }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Credit a co-author on the latest commit.
    #
    # https://help.github.com/en/articles/creating-a-commit-with-multiple-authors
    # https://help.github.com/en/articles/creating-a-commit-on-behalf-of-an-organization

    credit-co-author = "!f() { \
        if [ -n \"$1\" ] && [ -n \"$2\" ]; then \
            GIT_EDITOR=\"git interpret-trailers --in-place --trailer='Co-authored-by: $1 <$2>'\" git commit --amend; \
        fi \
    }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Configure git with my personal information.

    cup = "!f() { \
        git config user.name \"Cheong Yip\" && git config user.email \"wingy3181@gmail.com\"; \
    }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    d   = diff -- . ':!*package-lock.json' ':!*yarn.lock'

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    dc  = diff --cached -- . ':!*package-lock.json' ':!*yarn.lock'

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    f = fetch

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Show custom text-based graphical log of the commit history.

    g   = log --graph --pretty=custom

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Allow `$ git git git...`

    git = !exec git

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Show custom log of the commit history.

    l   = log --pretty=custom

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # List contributors.

    lc  = shortlog --email --summary --numbered --summary

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # List remote branches.

    lrb = "!f() { \
        remote=\"${1:-origin}\"; \
        git ls-remote --heads \"$remote\"; \
    }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Merge GitHub pull request on top of the current branch or,
    # if a branch name is specified, on top of the specified branch.
    # $1 : pull request number
    # $2 : (optional) branch name to merge pull request on top of
    #
    # It does this by:
    #    1. Fetching the remote PR locally
    #    2. Checkout and reset current branch or checkout specified branch given in 2nd argument
    #    3. Rebase PR branch on top of 2. above and remain checked out on PR branch
    #    4. Checkout current/specified branch
    #    5. Merge PR branch into current/specified branch (should be a fast-forward)
    #    6. Delete PR branch
    #    7. Amend last commit's message and adds 'Close: #<PR number>''
    #       -1 = limit number of commits to 1
    #       %B = raw body (unwrapped subject and body)

    mpr = "!f() { \
        current_branch=\"$(git symbolic-ref --short HEAD)\"; \
        branch=\"${2:-$current_branch}\"; \
        if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
            git fetch origin refs/pull/$1/head:pr/$1 && \
            git checkout -B \"$branch\" && \
            git rebase \"$branch\" pr/$1 && \
            git checkout -B \"$branch\" && \
            git merge pr/$1 && \
            git branch -delete --force pr/$1 && \
            git commit --amend --message=\"$(git log -1 --pretty=%B)\n\nClose: #$1\"; \
        fi \
    }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    p   = push

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    r   = rebase

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Remove the tag with the specified tag name if
    # exists and tag the latest commit with that name.

    retag = "!f() { \
        git tag --delete \"$1\" &> /dev/null; \
        git tag \"$1\"; \
    }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Remove last commits (by default it removes the last commit).

    rlc = "!f() { \
        number_of_commits=\"${1:-1}\"; \
        git reset --hard \"HEAD~$number_of_commits\"; \
    }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    s   = status

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Search commits by source code.
    # $1 : text to search for in source code that changed or the filename itself
    #      See https://git-scm.com/docs/git-log and search for pickaxe.

    sc = "!f() { \
        git log --date=short --decorate --pretty=custom -S\"$1\"; \
    }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Search commits by commit message.
    # $1 : text to search for in commit messages.
    #      Some characters should be escaped with \\
    #      e.g. \\[os\\]

    sm = "!f() { \
        git log --date=short --decorate --pretty=custom --grep=\"$1\"; \
    }; f"

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Show custom tree graph.

    t = log --graph --pretty=custom --all

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Update the content of the last commit by including all
    # staged changes.
    #
    # Note: "Update" is used loosely. Git doesn't actually
    # update the last commit, but instead, creates a new commit
    # based on the last commit and replaces it.

    u = commit --amend --no-edit

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Undo last commits (by default it undoes the last commit).

    ulc = "!f() { \
        number_of_commits=\"${1:-1}\"; \
        git reset --soft \"HEAD~$number_of_commits\"; \
    }; f"

[color "branch"]

    current = green bold
    local = green
    remote = yellow

[color "diff"]

    frag = magenta
    meta = yellow

    new = green
    old = red

    newMoved = cyan
    oldMoved = blue

[color "status"]

    added = green reverse
    changed = yellow reverse
    untracked = red reverse

[core]

    abbrev = 12
    attributesFile = ~/.gitattributes  # Tell git to use global/user-level gitattributes file
    autocrlf = input                   # 'true' for Windows, 'input' for Mac/Linux. See https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration#coreautocrlf-7kTgIgFwI4
    editor = vim
    excludesFile = ~/.gitignore        # Tell git to use global/user-level gitignore file

[commit]

    # Sign commits using GPG.
    # https://help.github.com/articles/signing-commits-using-gpg/

    gpgSign = false
    template = ~/.git_commit_message_template

[diff]

    # Show blocks of moved text of at least 20
    # alphanumeric characters differently than adds/deletes.
    #
    # https://git-scm.com/docs/git-diff#git-diff-zebra

    colorMoved = zebra

[diff "bin"]

    # Use `hexdump` to diff binary files.

    textconv = hexdump --canonical --no-squeezing

[help]

    # If a command is mistyped, make Git automatically run
    # the command it thinks the user wanted to type while also
    # giving the user some time to prevent it from doing so.
    #
    # https://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration#_help_autocorrect

    autocorrect = 20
    # If a command is mistyped, make Git automatically
    # run the command it thinks the user wanted to type.
    #autoCorrect = immediate

[init]

    defaultBranch = main

[pretty]

    custom = "%C(magenta)%h%C(red)%d %C(yellow)%ar %C(green)%s %C(yellow)(%an)"
    #                     │        │            │            │             └─ author name
    #                     │        │            │            └─ message
    #                     │        │            └─ date (relative)
    #                     │        └─ decorations (branch, heads or tags)
    #                     └─ hash (abbreviated)
    # See https://git-scm.com/docs/git-log#_pretty_formats for more info


[push]

    # Make `git push` automatically push relevant
    # annotated tags when pushing branches out.

    followTags = true

[user]

    # Do not guess the user's identity.
    # https://github.com/git/git/blob/90f7b16b3adc78d4bbabbd426fb69aa78c714f71/Documentation/config.txt#L2847-L2855
    # Available only after git 2.8+

    useConfigOnly = true

    # [!] DO NOT store sensitive information such as the Git user
    # credentials (`name` / `email`), or things such as the `signingKey`
    # in this file, add them in `~/.gitconfig.local`!

[include]

    # Load local configs.
    # https://git-scm.com/docs/git-config#_includes
    #
    # [!]: The following needs to remain at the end of this file in
    #      order to allow any of the above configs to be overwritten
    #      by the local ones

    path = ~/.gitconfig.local
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	required = true
