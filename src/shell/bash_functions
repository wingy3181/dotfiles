#!/usr/bin/env bash

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Simple Calculator.

? () {

    local result=""

    #                       ┌─ default (when --mathlib is used) is 20
    result="$( printf "scale=10;%s\n" "$*" | bc --mathlib | tr -d "\\\n" )"
    #                         remove the tailing "\" and "\n" ─┘
    #                         (large numbers are printed on multiple lines)
    # See https://www.gnu.org/software/bc/manual/html_node/bc_toc.html

    if [[ "$result" == *.* ]]; then

        # Improve the output for decimal numbers.

        printf "%s" "$result" |
        sed -e "s/^\./0./" -e "s/^-\./-0./" -e "s/0*$//;s/\.$//"
        #    |              |                └─ remove tailing zeros.
        #    |              └─ add "0" for cases like "-.5".
        #    └─ add "0" for cases like ".5".
    else
        printf "%s" "$result"
    fi

    printf "\n"

}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Clone a repository and install its dependencies.

clone() {

    git clone "$1" \
        || return

    cd "$(basename "${1%.*}")" \
        || return

    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    # Check if there are dependencies to be installed.

    if [ ! -f "package.json" ]; then
        return
    fi

    # Check if the project uses Yarn.

    if [ -f "yarn.lock" ] && command -v "yarn" $> /dev/null; then
        printf "\n"
        yarn install
        return
    fi

    # If not, assume it uses npm.

    if command -v "npm" $> /dev/null; then
        printf "\n"
        npm install
    fi

}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Create data URI from a file.

datauri() {
    # $1 : file to generate data uri for
    local mimeType=""

    # -f : True if file exists and is a regular file.
    if [ ! -f "$1" ]; then
        printf "%s is not a file.\n" "$1"
        return
    fi

    mimeType=$(file --brief --mime-type "$1")
    #               └─ do not prepend the filename to the output

    if [[ $mimeType == text/* ]]; then
        mimeType="$mimeType;charset=utf-8"
    fi

    printf "data:%s;base64,%s" \
        "$mimeType" \
        "$(openssl base64 -in "$1" | tr -d "\n")"
#            │       │                │  └── Delete characters in string argument from string passed in
#            │       │                └── translate characters command
#            │       └── base64 encode file
#            └── convert input text to open ssl format? (technically this isn't actually needed)

}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Delete files that match a certain pattern from the current directory.
# This lists the files deleted via the -ls option

delete-files() {
    # $1 : file pattern to search for files to delete
    local q="${1:-*.DS_Store}"
    find . -type f -name "$q" -ls -delete
    #    |       |         |   |   └─── delete found files (or directories)
    #    │       │         │   └─── list file information
    #    │       │         └─── pattern of filename to search for
    #    │       └──── search for files
    #    └────── current directory to recursively traverse to find files
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Search git repositories from current director and display report with
# remote information.

git-remotes-list() {
    echo "*********************************************************************"
    echo "$PWD"
    echo "*********************************************************************"
    find -L . -name .git -type d  | while read -r d; do
       cd "$d/.." || exit
       # Same as: echo "$PWD" | sed -e 's|'"$OLDPWD"'||'
       echo "${PWD//$OLDPWD/}"
       printf "%s\n" "$(git remote -v | sed -e 's/^\(.*\)$/    \1/')"
       cd "$OLDPWD" || exit
    done
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Create config for topics folder. This config will be used by other computers
# to sync the repositories.
# Config:
# - 1st column: Topic relative path from parent topics folder
# - 2nd column: git clone url
# - 3rd column: Relative path from parent topics folder to clone topic to

create-topics-config() {
    if [[ "$PWD" == *topics ]]
    then
        rm "$PWD/.topics.config"
        find -L . -name .git -type d  -mindepth 2 | while read -r d; do
           cd "$d/.." || exit
           local topicRelativePath="${PWD//$OLDPWD/}"
           local topicAbsolutePath="${PWD}"
           local topicParentAbsolutePath="$(dirname "$topicAbsolutePath")"
           local symlinkRelativeToTopicPath="$(readlink "$topicAbsolutePath")"
           local symlinkAbsolutePath="$topicParentAbsolutePath/$symlinkRelativeToTopicPath"
           local symlinkRelativeToTopicParentPath="$(relpath "$symlinkAbsolutePath" "$OLDPWD")"
           local gitUrl="$(git remote get-url origin)"
           local configItem="$topicRelativePath $gitUrl $symlinkRelativeToTopicParentPath"
           echo "$configItem"
           echo "$configItem" >> "$OLDPWD/.topics.config"
           cd "$OLDPWD" || exit
        done
    else
        echo "Please run 'create-topics-config' under 'topics' directory"
    fi
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Sync config for topics folder from topics config.
# Config:
# - 1st column: Topic relative path from parent topics folder
# - 2nd column: git clone url
# - 3rd column: Relative path from parent topics folder to clone topic to

sync-topics-config() {
    if [[ "$PWD" == *topics ]]
    then
        local topicsConfig="$PWD/.topics.config"
        while read -r name
        do
            local gitCloneUrl="$(echo "$name" | awk '{ print $2 }')"
            local gitDestinationPath="$(echo "$name" | awk '{ print $3 }')"
            if [[ -d "$gitDestinationPath" ]]
            then
                echo "$gitDestinationPath already exists"
            else
                echo "git clone $gitCloneUrl $gitDestinationPath"
                git clone "$gitCloneUrl" "$gitDestinationPath"
            fi
        done < "$topicsConfig"
    else
        echo "Please run 'sync-topics-config' under 'topics' directory"
    fi
}

# Sync symbolic links for topics folder from topics config.
# Config:
# - 1st column: Topic relative path from parent topics folder
# - 2nd column: git clone url
# - 3rd column: Relative path from parent topics folder to clone topic to
sync-topics-symbolic-links() {
    if [[ "$PWD" == *topics ]]
    then
        local topicsConfig="$PWD/.topics.config"
        while read -r name
        do
            local topicsFolderAndSubFolder="$(echo "$name" | awk '{ print $1 }')"
            local topicsSymbolicLinkPath="$(echo "$name" | awk '{ print $3 }')"
            if [ "$(readlink "${topicsFolderAndSubFolder:1:${#topicsFolderAndSubFolder}}")" == "../$topicsSymbolicLinkPath" ]; 
            then
                echo "$topicsFolderAndSubFolder → ../$topicsSymbolicLinkPath already exists"
            else
                echo "add-topic $topicsFolderAndSubFolder $topicsSymbolicLinkPath"
            fi
        done < "$topicsConfig"
    else
        echo "Please run 'sync-topics-sync-topics-symbolic-links' under 'topics' directory"
    fi
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Execute Vim macro

evm() {

    local numberOfTimes="${*: -1}"
    local files

    if [[ "$numberOfTimes" =~ ^[0-9]+$ ]]; then
        files=("${@:1:$#-1}")
    else
        numberOfTimes="1"
        files=("$@")
    fi

    for file in "${files[@]}"; do
        printf "* %s\n" "$file"
        vim \
            -c "norm! $numberOfTimes@q" \
            -c "wq" \
            "$file"
    done

}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Get gzip information (gzipped file size + reduction size).

gz() {
    # $1 : file to get gzip information from

    # declare integers
    declare -i gzippedSize=0
    declare -i originalSize=0

    # -f: True if file exists and is a regular file.
    if [ -f "$1" ]; then
        # -s : True if file exists and has a size greater than zero.
        if [ -s "$1" ]; then

            originalSize=$( wc -c < "$1" )
            # %12s\n : 12 chars long, convert to string, append \n
            # See http://en.cppreference.com/w/cpp/io/c/fprintf
            printf "\n original size:   %12s\n" "$(hrfs "$originalSize")"

            # gzip -c to standard output
            gzippedSize=$( gzip -c "$1" | wc -c )
            printf " gzipped size:    %12s\n" "$(hrfs "$gzippedSize")"

            printf " ─────────────────────────────\n"
            printf " reduction:       %12s [%s%%]\n\n" \
                        "$( hrfs $((originalSize - gzippedSize)) )" \
                        "$( printf "%s" "$originalSize $gzippedSize" | \
                            awk '{ printf "%.1f", 100 - $2 * 100 / $1 }' | \
                            sed -e "s/0*$//;s/\.$//" )"
                            #              └─ remove tailing zeros

        else
            printf "\"%s\" is empty.\n" "$1"
        fi
    else
        printf "\"%s\" is not a file.\n" "$1"
    fi

}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Human readable file size
# (because `du -h` doesn't cut it for me).

hrfs() {
    # $1 : number to convert to file size

    printf "%s" "$1" |
    awk '{
            i = 1;
            split("B KB MB GB TB PB EB ZB YB WTFB", v);
            value = $1;

            # confirm that the input is a number
            if ( value + .0 == value ) {

                while ( value >= 1024 ) {
                    value/=1024;
                    i++;
                }

                if ( value == int(value) ) {
                    printf "%d %s", value, v[i]
                } else {
                    printf "%.1f %s", value, v[i]
                }

            }
        }' |
    sed -e ":l" \
        -e "s/\([0-9]\)\([0-9]\{3\}\)/\1,\2/; t l"
    #    └─ add thousands separator
    #       (changes "1023.2 KB" to "1,023.2 KB")
    # See http://www.grymoire.com/Unix/Sed.html
    # -e  : combine multiple commands by using -e before each command
    # :l  : create label
    # t l : execute code at label if a pattern match is found
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Return relative path to $1 from $2.
# Example:
#   `relpath /foo/bar /foo/baz/foo` return `../../bar`

relpath() {
  # http://www.tldp.org/LDP/abs/html/parameter-substitution.html
  # $1 : Path we wish to get relative path for
  # $2 : Path from which to generate relative path from
  python -c "import os.path; print (os.path.relpath('$1','${2:-$PWD}'))" ;
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Adds symbolic link in 'topics' directory with $1 path to $2 optional path or current directory.
# - add-topic topics/subtopics
# - add-topic topics/subtopics path (optional)
# - add-topic topics/subtopics /path (optional)

add-topic() {
  # http://www.tldp.org/LDP/abs/html/parameter-substitution.html
  # $1 : Path we wish to get relative path for
  # $2 : Path from which to generate relative path from
  # python -c "import os.path; print (os.path.relpath('$1','${2:-$PWD}'))" ;
  local topicsPath="$(z -l topics | head -n 1 | awk '{ print $2 }')"
  local destinationSymlink="$topicsPath/$1"
  local destinationSymlinkParentDirectory=$(dirname "$destinationSymlink")
  local sourceRelativePathFromTopics=$(relpath "${2:-$PWD}" "$destinationSymlinkParentDirectory")
  echo "mkdir -p $destinationSymlinkParentDirectory && ln -s $sourceRelativePathFromTopics $destinationSymlink"
  mkdir -p "$destinationSymlinkParentDirectory" && ln -s "$sourceRelativePathFromTopics" "$destinationSymlink"
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Create new directories and enter the first one.

mkcd() {
    # $* : arguments passed to mkd which is the directories to create
    # -n : True if the length of string is nonzero.
    if [ -n "$*" ]; then

        mkdir -p "$@"
        #      └─ make parent directories if needed

        cd "$@" \
            || exit 1

    fi
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Search history.

sh() {
    # $* : arguments passed to qh which is the search text
    # HISTFILE : https://www.gnu.org/software/bash/manual/html_node/Bash-History-Facilities.html
    #
    #           ┌─ Enable colors for pipe.
    #           │  ("--color=auto" enables colors only
    #           │   if the output is in the terminal.)
    grep --color=always "$*" "$HISTFILE" \
        | less --no-init --raw-control-chars
          #    │         └─ Display ANSI color escape sequences in raw form.
          #    └─ Don't clear the screen after quitting less.
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Search for text recursively within the current directory.

st() {
    # $* : arguments passed to qt which is the search text
    grep --color=always "$*" \
         --exclude-dir=".git" \
         --exclude-dir="node_modules" \
         --ignore-case \
         --recursive \
         . \
        | less --no-init --raw-control-chars
          #    │         └─ Display ANSI color escape sequences in raw form.
          #    └─ Don't clear the screen after quitting less.
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# http://apple.stackexchange.com/questions/139807/what-does-update-terminal-cwd-do-in-the-terminal-of-os-x
# Supposed to be defined in /etc/bashrc but was missing and was being called by tmux-resurrect
update_terminal_cwd() {
    # Identify the directory using a "file:" scheme URL,
    # including the host name to disambiguate local vs.
    # remote connections. Percent-escape spaces.
    local SEARCH=' '
    local REPLACE='%20'
    local PWD_URL="file://$HOSTNAME${PWD//$SEARCH/$REPLACE}"
    printf '\e]7;%s\a' "$PWD_URL"
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Upgrade jenv if it is installed.

upgrade-jenv() {

    declare -r JENV_DIRECTORY="$HOME/.jenv"

    if [ -d "$JENV_DIRECTORY" ]; then # -d : True if file exists and is a directory.
        # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

        # Ensure the latest version of `jenv` is used

        execute_without_spinner \
            "cd $JENV_DIRECTORY \
                && git fetch --quiet origin \
                && git checkout --quiet \$(git describe --abbrev=0 --tags) \
                && . $HOME/.bash.local \
                && cd -" \
            "jenv (upgrade)"

        # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    fi
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Upgrade nvm if it is installed.

upgrade-nvm() {

    declare -r NVM_DIRECTORY="$HOME/.nvm"

    if [ -d "$NVM_DIRECTORY" ]; then # -d : True if file exists and is a directory.

        # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

        # Ensure the latest version of `nvm` is used

        execute_without_spinner \
            "cd $NVM_DIRECTORY \
                && git fetch --quiet origin \
                && git checkout --quiet \$(git describe --abbrev=0 --tags) \
                && . $NVM_DIRECTORY/nvm.sh \
                && cd -" \
            "nvm (upgrade)"

        # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    fi
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Upgrade tpm if it is installed.

upgrade-tpm() {

    declare -r TPM_DIR="$HOME/.tmux/plugins/tpm"

    if [ -d "$TPM_DIR" ]; then # -d : True if file exists and is a directory.

        # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

        # Ensure the latest version of `tpm` is used
        #
        # Replace:
        # `&& git checkout --quiet master \`
        # with:
        # `&& git checkout --quiet \$(git describe --abbrev=0 --tags) \`
        # when release tags are properly updated/maintained.

        execute_without_spinner \
            "cd $TPM_DIR \
                && git fetch --quiet origin \
                && git checkout --quiet master \
                && cd -" \
            "tpm (upgrade)"

        # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    fi
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Install/update tpm plugins if it is installed.

install-update-tpm-plugins() {

    declare -r TPM_DIR="$HOME/.tmux/plugins/tpm"

    if [ -d "$TPM_DIR" ]; then # -d : True if file exists and is a directory.

        # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

        # Ensure the latest version of `tpm` is used

        execute_without_spinner \
            "cd $TPM_DIR \
                && $TPM_DIR/bin/install_plugins \
                && $TPM_DIR/bin/update_plugins all \
                && cd -" \
            "tpm plugins (install/update)"

        # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

    fi
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Update vim plugins

update-vim-plugins() {

    execute_without_spinner \
        "vim +PluginsSetup" \
        "vim plugins (update)"

}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# Update global npm modules for all node versions installed via nvm.
# NOTE: To copy global npm packages across different node versions, use:
# `nvm install 8.9.4 --reinstall-packages-from=node`
# Check global packages list via `npm ls -g --depth 0``

update-global-npm-modules-for-all-node-versions() {
    # Remember current node version to restore later. Remove 'v' and carriage returns
    declare CURRENT_NODE_VERSION=$(node --version | sed "s/[v\r]//g")

    # Get all versions of node installed via `nvm`
    # Delete any text: '(', Delete any text: 'system', Delete any empty lines, Remove any spaces, 'v', '*', '->'
    mapfile -t NODE_VERSIONS < <(nvm list --no-colors | sed -e "s/.*(.*//g" | sed "s/system//g" | sed "s/[[:space:]]//g" | sed "s/[v*>-]//g" | sed "/^\s*$/d")
    for i in "${NODE_VERSIONS[@]}"; do
        # Switch node versions
        echo "${i}"
        nvm use "${i}"
        sleep 1s
        # Get all globally installed modules for current node version
        # Delete first line, first 4 characters of each line, Delete line starting with 'npm@', Delete any empty lines
        mapfile -t GLOBAL_NPM_MODULES < <(npm ls -g --depth 0 | sed -e "1d" | sed "s/^....//g" | sed "/^npm@/d" | sed "/^\s*$/d")

        # [[ "${i}" == "${CURRENT_NODE_VERSION}" ]] && echo '==' || echo '!='
        for j in "${GLOBAL_NPM_MODULES[@]}"; do
            echo "Updating global npm module: '${j}' for node version: '${i}'"
            npm update -g "${j}"
        done
    done
    # Restore to previous version that we set via nvm
    nvm use "${CURRENT_NODE_VERSION}"
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
